section
  h1(style="font-variant: small-caps; font-size: 2em") Characterizing Universal Reconfigurability of Modular Pivoting Robots
  hr
  h4
    | Hugo&nbsp;Akitaya
    span.sep &bull;
    u Erik&nbsp;Demaine
    span.sep &bull;
    | Andrei&nbsp;Gonczi
    span.sep &bull;
    | Dylan&nbsp;Hendrickson
    span.sep &bull;
    | Adam&nbsp;Hesterberg
    span.sep &bull;
    | Matias&nbsp;Korman
    span.sep &bull;
    | Oliver&nbsp;Korten
    span.sep &bull;
    | Jayson&nbsp;Lynch
    span.sep &bull;
    | Irene&nbsp;Parada
    span.sep &bull;
    | Vera&nbsp;Sacristán

svg(width="0px", height="0px")
  // Diagonal hatching: scaling of https://stackoverflow.com/a/22643745
  pattern#hatch(width=.12, height=.12, patternTransform="rotate(45 0 0)", patternUnits="userSpaceOnUse")
    line(y2=.12, stroke="var(--bad-color)", stroke-width=".09")

section
  h2 Reconfiguration by Pivots
  ul
    li Given two configurations of $n$ <b>robots/modules</b>
    li Reconfigure via a sequence of <b>pivots</b>
  .columns.r-stretch
    .column.fill.robots.
      .....
      .OOO.
      .O...
      .OOO.
      .O.O.
      .OOO.
      .....
    .column.arrow
    .column.fill.robots#anim69.
      .....
      .OOO.
      .O...
      .OOO.
      .O.O.
      .OOO.
      .....
    .column.arrow
    .column.fill.robots.
      .....
      .OOO.
      .O.O.
      .OOO.
      ...O.
      .OOO.
      .....
    div(data-target="anim69")
    .robotpivot.fragment(data-target="anim69", data-pivots="1,5/-180@2,6/-90@3,6/-180@4,6/-90@4,5/-90@4,4")
    .robotpivot.fragment(data-target="anim69", data-pivots="1,5/-180@4,3/180@4,3")
    .robotpivot.fragment(data-target="anim69", data-pivots="3,1/-180@3,1 1,5/-180@4,3 3,1/180@3,1")
    .robotpivot.fragment(data-target="anim69", data-pivots="1,4/-90@2,5")

- squareMoveSize = 'height: 250px'

section
  h2 Square Pivoting Models
  .columns
    .column
      .columns
        svg.column(viewBox="-0.1 -0.1 2.2 3.2", style=squareMoveSize)
          rect.bad(x=0, y=0, width=1, height=1)
          rect.bad(x=1, y=0, width=1, height=1)
          rect.bad(x=0, y=1, width=1, height=1)
          rect.bad(x=1, y=1, width=1, height=1)
          rect.robot(x=0, y=2, width=1, height=1)
          rect.robot(x=1, y=2, width=1, height=1)
          rect.robot.r1.rotate-90(x=0, y=1, width=1, height=1, style="transform-origin: 1px 2px")
        .column.space
        svg.column(viewBox="-0.1 -0.1 3.2 3.2", style=squareMoveSize)
          rect.bad(x=0, y=0, width=1, height=1)
          rect.bad(x=1, y=0, width=1, height=1)
          rect.empty(x=2, y=0, width=1, height=1)
          rect.bad(x=0, y=1, width=1, height=1)
          rect.bad(x=1, y=1, width=1, height=1)
          rect.bad(x=2, y=1, width=1, height=1)
          rect.bad(x=1, y=2, width=1, height=1)
          rect.bad(x=2, y=2, width=1, height=1)
          rect.robot(x=0, y=2, width=1, height=1)
          rect.robot.r1.rotate-180(x=0, y=1, width=1, height=1, style="transform-origin: 1px 2px")
      p Restricted moves
    .column.fragment
      svg(viewBox="-0.1 -0.1 3.2 3.2", style=squareMoveSize)
        rect.bad(x=0, y=0, width=1, height=1)
        rect.bad(x=1, y=0, width=1, height=1)
        rect.empty(x=2, y=0, width=1, height=1)
        rect.bad(x=0, y=1, width=1, height=1)
        rect.bad(x=1, y=1, width=1, height=1)
        rect.empty(x=1, y=2, width=1, height=1)
        rect.empty(x=2, y=2, width=1, height=1)
        rect.robot(x=0, y=2, width=1, height=1)
        rect.robot(x=2, y=1, width=1, height=1)
        rect.robot.r1.rotate-90(x=0, y=1, width=1, height=1, style="transform-origin: 1px 2px")
      p Leapfrog move
  .fragment
    .columns.justify-content-center
      svg.column(viewBox="-0.1 -0.1 3.2 3.2", style=squareMoveSize)
        rect.bad(x=0, y=0, width=1, height=1)
        rect.bad(x=1, y=0, width=1, height=1)
        rect.bad(x=2, y=0, width=1, height=1)
        rect.bad(x=0, y=1, width=1, height=1)
        rect.bad(x=1, y=1, width=1, height=1)
        rect.bad(x=2, y=1, width=1, height=1)
        rect.empty(x=1, y=2, width=1, height=1)
        rect.robot(x=0, y=2, width=1, height=1)
        rect.robot(x=2, y=2, width=1, height=1)
        g.rotate-90-2o2(style="transform-origin: 2px 2px")
          rect.robot.r1.rotate-90-1o2(x=0, y=1, width=1, height=1, style="transform-origin: 1px 2px")
      .column.space
      svg.column(viewBox="-0.1 -0.1 3.2 3.2", style=squareMoveSize)
        rect.bad(x=0, y=0, width=1, height=1)
        rect.bad(x=1, y=0, width=1, height=1)
        rect.bad(x=0, y=1, width=1, height=1)
        rect.bad(x=1, y=1, width=1, height=1)
        rect.empty(x=2, y=1, width=1, height=1)
        rect.empty(x=1, y=2, width=1, height=1)
        rect.empty(x=2, y=2, width=1, height=1)
        rect.robot(x=0, y=2, width=1, height=1)
        rect.robot(x=2, y=0, width=1, height=1)
        g.rotate-90-2o2(style="transform-origin: 2px 1px")
          rect.robot.r1.rotate-90-1o2(x=0, y=1, width=1, height=1, style="transform-origin: 1px 2px")
    p Monkey moves

- hexX = 1.5/2
- hexY = Math.sin(Math.PI*4/6)/2   // 0.8660254037844386/2
- hex = `0.5,0 0.25,${hexY} -0.25,${hexY} -0.5,0 -0.25,${-hexY} 0.25,${-hexY}`

section
  h2 Hexagon Pivoting Models
  .columns.r-stretch
    .column.fill
      svg(viewBox=`${-hexX-0.5-0.1} ${-2*hexY-0.1} ${2*hexX+1+0.2} ${6*hexY+0.2}`)
        polygon.bad(points=hex)
        polygon.bad(points=hex, transform=`translate(${hexX},${-hexY})`)
        polygon.bad(points=hex, transform=`translate(${hexX},${hexY})`)
        polygon.bad(points=hex, transform=`translate(${hexX},${3*hexY})`)
        polygon.bad(points=hex, transform=`translate(${0},${2*hexY})`)
        polygon.robot(points=hex, transform=`translate(${-hexX},${hexY})`)
        polygon.robot.r1.rotate-120(points=hex, style=`transform-origin: -0.25px ${hexY}px`)
      p Restricted move
    .column.space
    .column.fill
      svg(viewBox=`${-hexX-0.5-0.1} ${-2*hexY-0.1} ${2*hexX+1+0.2} ${6*hexY+0.2}`)
        polygon.bad(points=hex)
        polygon.bad(points=hex, transform=`translate(${hexX},${-hexY})`)
        polygon.bad(points=hex, transform=`translate(${hexX},${hexY})`)
        polygon.bad(points=hex, transform=`translate(${0},${2*hexY})`)
        polygon.robot(points=hex, transform=`translate(${hexX},${3*hexY})`)
        polygon.robot(points=hex, transform=`translate(${-hexX},${hexY})`)
        g.rotate-60-2o2(style=`transform-origin:${-0.25+hexX}px ${2*hexY}px`)
          polygon.robot.r1.rotate-60-1o2(points=hex, style=`transform-origin: -0.25px ${hexY}px`)
      p Monkey move

section
  h2 Known Results: Hexagons
  ul
    li Restricted moves are <b>universal</b> if no <b>forbidden pattern</b>
      cite [Nguyen, Guibas, Kim 2001]
  .columns.r-stretch
    .column.fill
      svg(viewBox=`${-hexX-0.5-0.1} ${-2*hexY-0.1} ${2*hexX+1+0.2} ${6*hexY+0.2}`)
        polygon.bad(points=hex)
        polygon.bad(points=hex, transform=`translate(${hexX},${-hexY})`)
        polygon.bad(points=hex, transform=`translate(${hexX},${hexY})`)
        polygon.bad(points=hex, transform=`translate(${hexX},${3*hexY})`)
        polygon.bad(points=hex, transform=`translate(${0},${2*hexY})`)
        polygon.robot(points=hex, transform=`translate(${-hexX},${hexY})`)
        polygon.robot.r1.rotate-120(points=hex, style=`transform-origin: -0.25px ${hexY}px`)
      p Restricted move
    .column.fill
      svg(viewBox=`${-hexX-0.5-0.1} ${-2*hexY-0.1} ${2*hexX+1+0.2} ${6*hexY+0.2}`)
        polygon.bad(points=hex, transform=`translate(${0}, ${hexY})`)
        polygon.robot(points=hex, transform=`translate(${-hexX},${0})`)
        polygon.robot(points=hex, transform=`translate(${hexX},${2*hexY})`)
      p Forbidden pattern

section
  h2 Known Results: Squares
  ul
    li Restricted moves are <b>universal</b> if no <b>forbidden pattern</b>
      cite [Sung, Bern, Romanishin, Rus 2015]
    li.fragment Restricted moves are <b>universal</b> given 5 <b>extra robots</b> on external boundary
      cite [Akitaya, Arkin, Damian, Demaine, Dujmović, Flatland, Korman, Palop, Parada, van Renssen, Sacristán 2019]
  .columns.r-stretch
    .column
      .columns
        svg.column(viewBox="-0.1 -0.1 2.2 3.2", style="height: 200px")
          rect.bad(x=0, y=0, width=1, height=1)
          rect.bad(x=1, y=0, width=1, height=1)
          rect.bad(x=0, y=1, width=1, height=1)
          rect.bad(x=1, y=1, width=1, height=1)
          rect.robot(x=0, y=2, width=1, height=1)
          rect.robot(x=1, y=2, width=1, height=1)
          rect.robot.r1.rotate-90(x=0, y=1, width=1, height=1, style="transform-origin: 1px 2px")
        .column.space
        svg.column(viewBox="-0.1 -0.1 3.2 3.2", style="height: 200px")
          rect.bad(x=0, y=0, width=1, height=1)
          rect.bad(x=1, y=0, width=1, height=1)
          rect.empty(x=2, y=0, width=1, height=1)
          rect.bad(x=0, y=1, width=1, height=1)
          rect.bad(x=1, y=1, width=1, height=1)
          rect.bad(x=2, y=1, width=1, height=1)
          rect.bad(x=1, y=2, width=1, height=1)
          rect.bad(x=2, y=2, width=1, height=1)
          rect.robot(x=0, y=2, width=1, height=1)
          rect.robot.r1.rotate-180(x=0, y=1, width=1, height=1, style="transform-origin: 1px 2px")
      p Restricted moves
    .column
      .columns
        svg.column(viewBox="-0.1 -0.1 2.2 2.2", style="height: 133.333px")
          rect.bad(x=0, y=0, width=1, height=1)
          rect.bad(x=1, y=1, width=1, height=1)
          rect.robot(x=0, y=1, width=1, height=1)
          rect.robot(x=1, y=0, width=1, height=1)
        .column.space
        svg.column(viewBox="-0.1 -0.1 3.2 1.2", style="height: 66.666px")
          rect.bad(x=0, y=0, width=1, height=1)
          rect.bad(x=2, y=0, width=1, height=1)
          rect.robot(x=1, y=0, width=1, height=1)
        .column.space
        svg.column(viewBox="-0.1 -0.1 3.2 2.2", style="height: 133.333px")
          rect.bad(x=0, y=0, width=1, height=1)
          rect.bad(x=1, y=0, width=1, height=1)
          rect.bad(x=1, y=1, width=1, height=1)
          rect.bad(x=2, y=1, width=1, height=1)
          rect.robot(x=0, y=1, width=1, height=1)
          rect.robot(x=2, y=0, width=1, height=1)
      p Forbidden patterns

section
  h2 Our Results
  ul
    li No forbidden patterns or extra robots
  p
  table
    tr
      th Model:
      th Restricted
      th Restricted + Leapfrog
      th Restricted + Leapfrog + Monkey
    tr
      th Hexagons
      td PSPACE-hard
      td
        svg(width="225px", height="100px", viewBox="0 0 2.25 1")
          rect(width="100%", height="100%", fill="url(#hatch)")
      td Universal:
        span(style="font-size: 90%") $O(n^3)$ moves
    tr
      th Squares
      td PSPACE-hard
      td PSPACE-hard
      td PSPACE-hard

section
  h2 Hexagon Algorithm Overview
  .columns.r-stretch
    .column.fill
      ul
        li <u>Goal</u>: <b>Canonicalize</b><br>into vertical strip
    .column.h-100.hexrobots.
      . . . . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . . . .

section(data-transition="fade")
  h2 Hexagon Algorithm Overview
  .columns.r-stretch
    .column.fill
      ul
        li <u>Goal</u>: <b>Canonicalize</b><br>into vertical strip
        li If there's a robot
          ul
            li on the outer shell,
            li whose removal preserves 2-connectivity,
          | then can pivot robot directly to vertical strip
        li.fragment Otherwise, we need to make such a robot
    .column.h-100.hexrobots#hexcanon.
      . . . . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . O O .
      . O O O .
       1 . O O
      . O O O .
       O O . O
      . O . . .
       O . . O
      . . . . .
       O . O O
      . O O O .
       . O O .
      . . O . .
       . . . .
    .robotpivot.fragment(data-fragment-index=1, data-target="hexcanon", data-pivots="1,9/120@TR1,9/120@R1,7/120@R2,6/120@TR3,5/120@TR3,3/120@R3,1")
