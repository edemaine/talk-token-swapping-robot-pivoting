- smallSquareMoveSize = 'height: 150px'

section
  h1(style="font-variant: small-caps; font-size: 2em") Characterizing Universal Reconfigurability of Modular Pivoting Robots
  hr
  h4
    | Hugo&nbsp;Akitaya
    span.sep &bull;
    u Erik&nbsp;Demaine
    span.sep &bull;
    | Andrei&nbsp;Gonczi
    span.sep &bull;
    | Dylan&nbsp;Hendrickson
    span.sep &bull;
    | Adam&nbsp;Hesterberg
    span.sep &bull;
    | Matias&nbsp;Korman
    span.sep &bull;
    | Oliver&nbsp;Korten
    span.sep &bull;
    | Jayson&nbsp;Lynch
    span.sep &bull;
    | Irene&nbsp;Parada
    span.sep &bull;
    | Vera&nbsp;Sacrist√°n
  .columns
    svg.column(viewBox="-0.1 -0.1 2.2 3.2", style=smallSquareMoveSize)
      rect.bad(x=0, y=0, width=1, height=1)
      rect.bad(x=1, y=0, width=1, height=1)
      rect.bad(x=0, y=1, width=1, height=1)
      rect.bad(x=1, y=1, width=1, height=1)
      rect.robot(x=0, y=2, width=1, height=1)
      rect.robot(x=1, y=2, width=1, height=1)
      rect.robot.r1.rotate-90(x=0, y=1, width=1, height=1, style="transform-origin: 1px 2px")
      circle.pivotCenter(cx=1, cy=2, r=0.15)
    .column.space
    svg.column(viewBox="-0.1 -0.1 3.2 3.2", style=smallSquareMoveSize)
      rect.bad(x=0, y=0, width=1, height=1)
      rect.bad(x=1, y=0, width=1, height=1)
      rect.empty(x=2, y=0, width=1, height=1)
      rect.bad(x=0, y=1, width=1, height=1)
      rect.bad(x=1, y=1, width=1, height=1)
      rect.bad(x=2, y=1, width=1, height=1)
      rect.bad(x=1, y=2, width=1, height=1)
      rect.bad(x=2, y=2, width=1, height=1)
      rect.robot(x=0, y=2, width=1, height=1)
      rect.robot.r1.rotate-180(x=0, y=1, width=1, height=1, style="transform-origin: 1px 2px")
      circle.pivotCenter(cx=1, cy=2, r=0.15)
    .column.space
    svg.column(viewBox="-0.1 -0.1 3.2 3.2", style=smallSquareMoveSize)
      rect.bad(x=0, y=0, width=1, height=1)
      rect.bad(x=1, y=0, width=1, height=1)
      rect.empty(x=2, y=0, width=1, height=1)
      rect.bad(x=0, y=1, width=1, height=1)
      rect.bad(x=1, y=1, width=1, height=1)
      rect.empty(x=1, y=2, width=1, height=1)
      rect.empty(x=2, y=2, width=1, height=1)
      rect.robot(x=0, y=2, width=1, height=1)
      rect.robot(x=2, y=1, width=1, height=1)
      rect.robot.r1.rotate-90(x=0, y=1, width=1, height=1, style="transform-origin: 1px 2px")
      circle.pivotCenter(cx=1, cy=2, r=0.15)
    .column.space
    svg.column(viewBox="-0.1 -0.1 3.2 3.2", style=smallSquareMoveSize)
      rect.bad(x=0, y=0, width=1, height=1)
      rect.bad(x=1, y=0, width=1, height=1)
      rect.bad(x=2, y=0, width=1, height=1)
      rect.bad(x=0, y=1, width=1, height=1)
      rect.bad(x=1, y=1, width=1, height=1)
      rect.bad(x=2, y=1, width=1, height=1)
      rect.empty(x=1, y=2, width=1, height=1)
      rect.robot(x=0, y=2, width=1, height=1)
      rect.robot(x=2, y=2, width=1, height=1)
      g.rotate-90-2o2(style="transform-origin: 2px 2px")
        rect.robot.r1.rotate-90-1o2(x=0, y=1, width=1, height=1, style="transform-origin: 1px 2px")
      circle.pivotCenter.show-first-half(cx=1, cy=2, r=0.15)
      circle.pivotCenter.show-second-half(cx=2, cy=2, r=0.15)
    .column.space
    svg.column(viewBox="-0.1 -0.1 3.2 3.2", style=smallSquareMoveSize)
      rect.bad(x=0, y=0, width=1, height=1)
      rect.bad(x=1, y=0, width=1, height=1)
      rect.bad(x=0, y=1, width=1, height=1)
      rect.bad(x=1, y=1, width=1, height=1)
      rect.empty(x=2, y=1, width=1, height=1)
      rect.empty(x=1, y=2, width=1, height=1)
      rect.empty(x=2, y=2, width=1, height=1)
      rect.robot(x=0, y=2, width=1, height=1)
      rect.robot(x=2, y=0, width=1, height=1)
      g.rotate-90-2o2(style="transform-origin: 2px 1px")
        rect.robot.r1.rotate-90-1o2(x=0, y=1, width=1, height=1, style="transform-origin: 1px 2px")
      circle.pivotCenter.show-first-half(cx=1, cy=2, r=0.15)
      circle.pivotCenter.show-second-half(cx=2, cy=1, r=0.15)

svg.hidden
  // Diagonal hatching: scaling of https://stackoverflow.com/a/22643745
  pattern#hatch(width=.12, height=.12, patternTransform="rotate(45 0 0)", patternUnits="userSpaceOnUse")
    line(y2=.12, stroke="var(--bad-color)", stroke-width=".09")

section
  h2 Reconfiguration by Pivots
  ul
    li Given two configurations of $n$ <b>robots/modules</b>
    li.fragment(data-fragment-index=1) Reconfigure via a sequence of <b>pivots</b>
    li.fragment Maintain <b>connectivity</b> via edges <i>throughout</i>
      div(style="font-size: 80%") (including during pivot, except for the pivoted robot)
  .columns.r-stretch
    .column.fill.robots.
      .....
      .OOO.
      .O...
      .OOO.
      .O.O.
      .OOO.
      .....
    .column.arrow
    .column.fill.fragment.robots#anim69(data-fragment-index=1).
      .....
      .OOO.
      .O...
      .OOO.
      .O.O.
      .OOO.
      .....
    .column.arrow
    .column.fill.robots.
      .....
      .OOO.
      .O.O.
      .OOO.
      ...O.
      .OOO.
      .....
    .robotpivot.fragment(data-fragment-index=2, data-target="anim69", data-pivots="1,5/-180@2,6/-90@3,6/-180@4,6/-90@4,5/-90@4,4")
    .robotpivot.fragment(data-fragment-index=3, data-target="anim69", data-pivots="1,5/-180@4,3/180@4,3")
    .robotpivot.fragment(data-fragment-index=4, data-target="anim69", data-pivots="3,1/-180@3,1 1,5/-180@4,3 3,1/180@3,1")
    .robotpivot.fragment(data-fragment-index=5, data-target="anim69", data-pivots="1,4/-90@2,5")

- squareMoveSize = 'height: 250px'

section
  h2 Square Pivoting Models
  .columns
    .column
      .columns
        svg.column(viewBox="-0.1 -0.1 2.2 3.2", style=squareMoveSize)
          rect.bad(x=0, y=0, width=1, height=1)
          rect.bad(x=1, y=0, width=1, height=1)
          rect.bad(x=0, y=1, width=1, height=1)
          rect.bad(x=1, y=1, width=1, height=1)
          rect.robot(x=0, y=2, width=1, height=1)
          rect.robot(x=1, y=2, width=1, height=1)
          rect.robot.r1.rotate-90(x=0, y=1, width=1, height=1, style="transform-origin: 1px 2px")
          circle.pivotCenter(cx=1, cy=2, r=0.15)
        .column.space
        svg.column(viewBox="-0.1 -0.1 3.2 3.2", style=squareMoveSize)
          rect.bad(x=0, y=0, width=1, height=1)
          rect.bad(x=1, y=0, width=1, height=1)
          rect.empty(x=2, y=0, width=1, height=1)
          rect.bad(x=0, y=1, width=1, height=1)
          rect.bad(x=1, y=1, width=1, height=1)
          rect.bad(x=2, y=1, width=1, height=1)
          rect.bad(x=1, y=2, width=1, height=1)
          rect.bad(x=2, y=2, width=1, height=1)
          rect.robot(x=0, y=2, width=1, height=1)
          rect.robot.r1.rotate-180(x=0, y=1, width=1, height=1, style="transform-origin: 1px 2px")
          circle.pivotCenter(cx=1, cy=2, r=0.15)
      p Restricted moves
    .column.fragment
      svg(viewBox="-0.1 -0.1 3.2 3.2", style=squareMoveSize)
        rect.bad(x=0, y=0, width=1, height=1)
        rect.bad(x=1, y=0, width=1, height=1)
        rect.empty(x=2, y=0, width=1, height=1)
        rect.bad(x=0, y=1, width=1, height=1)
        rect.bad(x=1, y=1, width=1, height=1)
        rect.empty(x=1, y=2, width=1, height=1)
        rect.empty(x=2, y=2, width=1, height=1)
        rect.robot(x=0, y=2, width=1, height=1)
        rect.robot(x=2, y=1, width=1, height=1)
        rect.robot.r1.rotate-90(x=0, y=1, width=1, height=1, style="transform-origin: 1px 2px")
        circle.pivotCenter(cx=1, cy=2, r=0.15)
      p Leapfrog move
  .fragment
    .columns.justify-content-center
      svg.column(viewBox="-0.1 -0.1 3.2 3.2", style=squareMoveSize)
        rect.bad(x=0, y=0, width=1, height=1)
        rect.bad(x=1, y=0, width=1, height=1)
        rect.bad(x=2, y=0, width=1, height=1)
        rect.bad(x=0, y=1, width=1, height=1)
        rect.bad(x=1, y=1, width=1, height=1)
        rect.bad(x=2, y=1, width=1, height=1)
        rect.empty(x=1, y=2, width=1, height=1)
        rect.robot(x=0, y=2, width=1, height=1)
        rect.robot(x=2, y=2, width=1, height=1)
        g.rotate-90-2o2(style="transform-origin: 2px 2px")
          rect.robot.r1.rotate-90-1o2(x=0, y=1, width=1, height=1, style="transform-origin: 1px 2px")
        circle.pivotCenter.show-first-half(cx=1, cy=2, r=0.15)
        circle.pivotCenter.show-second-half(cx=2, cy=2, r=0.15)
      .column.space
      svg.column(viewBox="-0.1 -0.1 3.2 3.2", style=squareMoveSize)
        rect.bad(x=0, y=0, width=1, height=1)
        rect.bad(x=1, y=0, width=1, height=1)
        rect.bad(x=0, y=1, width=1, height=1)
        rect.bad(x=1, y=1, width=1, height=1)
        rect.empty(x=2, y=1, width=1, height=1)
        rect.empty(x=1, y=2, width=1, height=1)
        rect.empty(x=2, y=2, width=1, height=1)
        rect.robot(x=0, y=2, width=1, height=1)
        rect.robot(x=2, y=0, width=1, height=1)
        g.rotate-90-2o2(style="transform-origin: 2px 1px")
          rect.robot.r1.rotate-90-1o2(x=0, y=1, width=1, height=1, style="transform-origin: 1px 2px")
        circle.pivotCenter.show-first-half(cx=1, cy=2, r=0.15)
        circle.pivotCenter.show-second-half(cx=2, cy=1, r=0.15)
    p Monkey moves

- hexX = 1.5/2
- hexY = Math.sin(Math.PI*4/6)/2   // 0.8660254037844386/2
- hex = `0.5,0 0.25,${hexY} -0.25,${hexY} -0.5,0 -0.25,${-hexY} 0.25,${-hexY}`

section
  h2 Hexagon Pivoting Models
  .columns.r-stretch
    .column.fill
      svg(viewBox=`${-hexX-0.5-0.1} ${-2*hexY-0.1} ${2*hexX+1+0.2} ${6*hexY+0.2}`)
        polygon.bad(points=hex)
        polygon.bad(points=hex, transform=`translate(${hexX},${-hexY})`)
        polygon.bad(points=hex, transform=`translate(${hexX},${hexY})`)
        polygon.bad(points=hex, transform=`translate(${hexX},${3*hexY})`)
        polygon.bad(points=hex, transform=`translate(${0},${2*hexY})`)
        polygon.robot(points=hex, transform=`translate(${-hexX},${hexY})`)
        polygon.robot.r1.rotate-120(points=hex, style=`transform-origin: -0.25px ${hexY}px`)
        circle.pivotCenter(cx=-0.25, cy=hexY, r=0.12)
      p Restricted move
    .column.space
    .column.fill
      svg(viewBox=`${-hexX-0.5-0.1} ${-2*hexY-0.1} ${2*hexX+1+0.2} ${6*hexY+0.2}`)
        polygon.bad(points=hex)
        polygon.bad(points=hex, transform=`translate(${hexX},${-hexY})`)
        polygon.bad(points=hex, transform=`translate(${hexX},${hexY})`)
        polygon.bad(points=hex, transform=`translate(${0},${2*hexY})`)
        polygon.robot(points=hex, transform=`translate(${hexX},${3*hexY})`)
        polygon.robot(points=hex, transform=`translate(${-hexX},${hexY})`)
        g.rotate-60-2o2(style=`transform-origin:${-0.25+hexX}px ${2*hexY}px`)
          polygon.robot.r1.rotate-60-1o2(points=hex, style=`transform-origin: -0.25px ${hexY}px`)
        circle.pivotCenter.show-first-half(cx=-0.25, cy=hexY, r=0.12)
        circle.pivotCenter.show-second-half(cx=-0.25+hexX, cy=2*hexY, r=0.12)
      p Monkey move

section
  h2 Known Results: Hexagons
  ul
    li Restricted moves are <b>universal</b> if no <b>forbidden pattern</b>
      cite [Nguyen, Guibas, Kim 2001]
  .columns.r-stretch
    .column.fill
      svg(viewBox=`${-hexX-0.5-0.1} ${-2*hexY-0.1} ${2*hexX+1+0.2} ${6*hexY+0.2}`)
        polygon.bad(points=hex)
        polygon.bad(points=hex, transform=`translate(${hexX},${-hexY})`)
        polygon.bad(points=hex, transform=`translate(${hexX},${hexY})`)
        polygon.bad(points=hex, transform=`translate(${hexX},${3*hexY})`)
        polygon.bad(points=hex, transform=`translate(${0},${2*hexY})`)
        polygon.robot(points=hex, transform=`translate(${-hexX},${hexY})`)
        polygon.robot.r1.rotate-120(points=hex, style=`transform-origin: -0.25px ${hexY}px`)
        circle.pivotCenter(cx=-0.25, cy=hexY, r=0.12)
      p Restricted move
    .column.fill
      svg(viewBox=`${-hexX-0.5-0.1} ${-2*hexY-0.1} ${2*hexX+1+0.2} ${6*hexY+0.2}`)
        polygon.bad(points=hex, transform=`translate(${0}, ${hexY})`)
        polygon.robot(points=hex, transform=`translate(${-hexX},${0})`)
        polygon.robot(points=hex, transform=`translate(${hexX},${2*hexY})`)
      p Forbidden pattern

section
  h2 Known Results: Squares
  ul
    li Restricted moves are <b>universal</b> if no <b>forbidden pattern</b>
      cite [Sung, Bern, Romanishin, Rus 2015]
    li.fragment Restricted moves are <b>universal</b> given 5 <b>extra robots</b> on external boundary
      cite [Akitaya, Arkin, Damian, Demaine, Dujmoviƒá, Flatland, Korman, Palop, Parada, van Renssen, Sacrist√°n 2019]
  .columns.r-stretch
    .column
      .columns
        svg.column(viewBox="-0.1 -0.1 2.2 3.2", style="height: 200px")
          rect.bad(x=0, y=0, width=1, height=1)
          rect.bad(x=1, y=0, width=1, height=1)
          rect.bad(x=0, y=1, width=1, height=1)
          rect.bad(x=1, y=1, width=1, height=1)
          rect.robot(x=0, y=2, width=1, height=1)
          rect.robot(x=1, y=2, width=1, height=1)
          rect.robot.r1.rotate-90(x=0, y=1, width=1, height=1, style="transform-origin: 1px 2px")
          circle.pivotCenter(cx=1, cy=2, r=0.15)
        .column.space
        svg.column(viewBox="-0.1 -0.1 3.2 3.2", style="height: 200px")
          rect.bad(x=0, y=0, width=1, height=1)
          rect.bad(x=1, y=0, width=1, height=1)
          rect.empty(x=2, y=0, width=1, height=1)
          rect.bad(x=0, y=1, width=1, height=1)
          rect.bad(x=1, y=1, width=1, height=1)
          rect.bad(x=2, y=1, width=1, height=1)
          rect.bad(x=1, y=2, width=1, height=1)
          rect.bad(x=2, y=2, width=1, height=1)
          rect.robot(x=0, y=2, width=1, height=1)
          rect.robot.r1.rotate-180(x=0, y=1, width=1, height=1, style="transform-origin: 1px 2px")
          circle.pivotCenter(cx=1, cy=2, r=0.15)
      p Restricted moves
    .column
      .columns
        svg.column(viewBox="-0.1 -0.1 2.2 2.2", style="height: 133.333px")
          rect.bad(x=0, y=0, width=1, height=1)
          rect.bad(x=1, y=1, width=1, height=1)
          rect.robot(x=0, y=1, width=1, height=1)
          rect.robot(x=1, y=0, width=1, height=1)
        .column.space
        svg.column(viewBox="-0.1 -0.1 3.2 1.2", style="height: 66.666px")
          rect.bad(x=0, y=0, width=1, height=1)
          rect.bad(x=2, y=0, width=1, height=1)
          rect.robot(x=1, y=0, width=1, height=1)
        .column.space
        svg.column(viewBox="-0.1 -0.1 3.2 2.2", style="height: 133.333px")
          rect.bad(x=0, y=0, width=1, height=1)
          rect.bad(x=1, y=0, width=1, height=1)
          rect.bad(x=1, y=1, width=1, height=1)
          rect.bad(x=2, y=1, width=1, height=1)
          rect.robot(x=0, y=1, width=1, height=1)
          rect.robot(x=2, y=0, width=1, height=1)
      p Forbidden patterns

section
  h2 Our Results
  ul
    li No forbidden patterns or extra robots
  p
  table
    tr
      th Model:
      th Restricted
      th Restricted + Leapfrog
      th Restricted + Leapfrog + Monkey
    tr
      th Hexagons
      td PSPACE-hard
      td
        svg(width="225px", height="100px", viewBox="0 0 2.25 1")
          rect(width="100%", height="100%", fill="url(#hatch)")
      td Universal:
        span(style="font-size: 90%") $O(n^3)$ moves
    tr
      th Squares
      td PSPACE-hard
      td PSPACE-hard
      td PSPACE-hard

section
  //h2 Hexagon Model Intuition
  h2 Restricted vs. Monkey Moves
  ul
    li Some configurations are <b>rigid</b> under restricted moves
      cite [Nguyen, Guibas, Kim 2001]
    li.fragment(data-fragment-index=4) Monkey moves unlock these examples
  .hexrobots.r-stretch#rigidhex.
     . . . . . . O . 
    . . . . . . O O .
     . . . . . O . O 
    . O . . . . . . .
     O O . O O O O O 
    . . . O O O . . .
     O O O . . . O O 
    . . . . . . . O .
     O . O . . . . . 
    . O O . . . . . .
     . O . . . . . . 
    . . . . . . . . .
  .robotpivot.fragment(data-fragment-index=1, data-target="rigidhex", data-pivots="5,6/120@TR5,6/-120@TR5,6")
  .robotpivot.fragment(data-fragment-index=2, data-target="rigidhex", data-pivots="3,6/120@TL3,6/-120@TL3,6")
  .robotpivot.fragment(data-fragment-index=3, data-target="rigidhex", data-pivots="3,6/-120@TR3,6/120@TR3,6")
  .robotpivot.fragment(data-target="rigidhex", data-pivots="3,6/-60@TR3,6/-60@TR4,7")

section
  h2 Hexagon Algorithm Overview
  .columns.r-stretch
    .column.fill
      ul
        li <u>Goal</u>: <b>Canonicalize</b><br>into vertical strip
    .column.h-100.hexrobots.
      . . . . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . . . .

section(data-transition="fade")
  h2 Hexagon Algorithm Overview
  .columns.r-stretch
    .column.fill
      ul
        li <u>Goal</u>: <b>Canonicalize</b><br>into vertical strip
        p
        li If a robot is
          ul
            li on the <b>convex hull</b>,
            li whose removal <b>preserves connectivity</b>,
          | then can pivot robot directly to vertical strip
        li.fragment Otherwise, we need to make such a robot&hellip;
    .column.h-100.hexrobots#hexcanon.
      . . . . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . O O .
      . O O O .
       1 . O O
      . O O O .
       O O . O
      . O . . .
       O . . O
      . . . . .
       O . O O
      . O O O .
       . O O .
      . . O . .
       . . . .
    .robotpivot.fragment(data-fragment-index=1, data-target="hexcanon", data-pivots="1,9/120@TR1,9/120@R1,7/120@R2,6/120@TR3,5/120@TR3,3/120@R3,1")

section
  h2 Hexagon Algorithm: Phase 1
  ul
    li Remove degree-1 vertices
  .hexrobots.r-stretch#remove-leaves.
    . . . . .
     . O O . .
    . O O O .
     . . . . .
    . O 1 O 1
     O . . O .
    . . . . .
     O . . O .
    . O . O .
     . . . O .
    . O O O .
     . O . . .
    . . O . .
     . . . . .
  .robotpivot.fragment(data-target="remove-leaves", data-pivots="8,4/120@BL8,4")
  .robotpivot.fragment(data-target="remove-leaves", data-pivots="4,4/60@TL4,4/60@TL3,5")
  //-.robotpivot.fragment(data-target="remove-leaves", data-pivots="4,4/60@L3,5/60@L3,7")
  //-.robotpivot.fragment(data-target="remove-leaves", data-pivots="4,4/60@BL3,7/60@BL4,8/60@BR4,8/60@BR5,7/60@R5,7/60@R5,5/60@TR5,5/60@TR4,4")
  .robotpivot.fragment(data-target="remove-leaves", data-pivots="4,4/60@L3,5/60@L3,7/60@BL3,7/60@BL4,8")
  .robotpivot.fragment(data-target="remove-leaves", data-pivots="4,4/60@BR4,8/60@BR5,7 4,10/-120@L4,10 4,4/-120@BR5,7")

section
  //h2 Hexagon Algorithm: Phase 1
  .r-stretch
    img.big.invert.pop(src="degree1.svg")
    div(style="position: absolute; left: 0.5em; top: 0.5em;") Case analysis

section
  h2 Hexagon Algorithm: Phase 2
  ul
    li <b>2-connected components</b> connected by <b>bridges</b>
    li <b>Merge</b> leaf 2-connected component into others
  .hexrobots.r-stretch#merge-leaf.
    . . . . . . . . 
     . . . . . . . .
    . . . . . . 1 . 
     . . . . . 1 . .
    . . . . . . 1 . 
     . . . . . 1 . .
    . . O . O . 1 . 
     . O O O O . . .
    . O . O . O 2 . 
     . . . . . O . .
    . O . O O O . . 
     2 O O O O . 1 .
    . . O . . . 1 1 
     1 . . . 2 1 . .
    . 1 . . . . 1 1 
     1 1 . . 2 1 . .
    . 1 . . . 2 1 1 
     . . . . . . 1 .
    . . . . . . . . 
  .robotpivot.fragment(data-target="merge-leaf", data-pivots="2,16/-120@R2,16/-120@TR3,17/-120@TL4,16")
  .robotpivot.fragment(data-target="merge-leaf", data-pivots="12,2/-120@L12,2/-120@BL11,1/-120@BR10,2/-60@BR10,4/-60@BR9,5")
  .robotpivot.fragment(data-target="merge-leaf", data-pivots="11,3/-120@BL11,3")
  .robotpivot.fragment(data-target="merge-leaf", data-pivots="13,11/-60@L13,11/-60@L13,9 12,12/60@BR12,12/60@BR13,11")

section
  //h2 Hexagon Algorithm: Phase 2
  .r-stretch
    img.big.invert.pop(src="merge-example.svg")
    div(style="position: absolute; left: 0.5em; top: 30.5%;") Merge procedure

section
  h2 Hexagon Algorithm: Phase 3
  .columns.r-stretch
    .column.fill
      ul
        li Now 2-connected
        li Using a modified merge procedure, can produce a robot
          ul
            li on the convex hull,
            li whose removal <b>preserves 2-connectivity</b>
        li Pivot robot directly to vertical strip
    .column.h-100.hexrobots#phase3.
      . . . . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . . . .
      . . O . .
       . O O .
      . O O O .
       1 . O O
      . O O O .
       O O . O
      . O . . .
       O . . O
      . . . . .
       O . O O
      . O O O .
       . O O .
      . . O . .
       . . . .
    .robotpivot.fragment(data-target="phase3", data-pivots="1,9/120@TR1,9/120@R1,7/120@R2,6/120@TR3,5/120@TR3,3/120@R3,1")

section
  h2 Hexagon Algorithm Analysis
  ul
    li <u>Phase 1</u> (leaf removal): $O(n^2)$ moves
    li <u>Phase 2</u> (merging 2-connected components):
      ul
        li $O(n^2)$ moves per 2-connected component
        li $\Rightarrow O(n^3)$ overall
    li <u>Phase 3</u> (canonicalization):
      ul
        li $O(n^2)$ moves per robot $\Rightarrow O(n^3)$ overall
        li $\Rightarrow O(n^3)$ moves overall
    li $\Rightarrow O(n^3)$ moves overall
    p
    li.fragment <u>OPEN</u>: Do $O(n^2)$ moves suffice?

section
  h2 Our Results
  ul
    li No forbidden patterns or extra robots
  p
  table
    tr
      th Model:
      th Restricted
      th Restricted + Leapfrog
      th Restricted + Leapfrog + Monkey
    tr
      th Hexagons
      td PSPACE-hard
      td
        svg(width="225px", height="100px", viewBox="0 0 2.25 1")
          rect(width="100%", height="100%", fill="url(#hatch)")
      td Universal:
        span(style="font-size: 90%") $O(n^3)$ moves
    tr
      th Squares
      td PSPACE-hard
      td PSPACE-hard
      td PSPACE-hard

section
  h2 Motion-Planning-Through-Gadgets Framework
  ul
    li Which <b>local finite-state gadgets</b> suffice to prove <b>single-agent</b> motion planning <b>PSPACE-complete</b>?
      span(style="font-size: 80%")
        cite [Demaine, Grosof, Lynch, Rudoy 2018]
        span.sep &bull;
        cite [Demaine, Hendrickson, Lynch 2020]
        span.sep &bull;
        cite [Ani, Bosboom, Demaine, Diomidov, Hendrickson, Lynch 2020]
        span.sep &bull;
        cite [Ani, Demaine, Hendrickson, Lynch 2021]
  .columns.r-stretch
    .column
      p
      ul
        li <u>Example</u>:<br><b>Locking 2-toggle</b>
    .column.fill(style="margin-top: -25px")
      img.big.invert.pop.bright(src="L2T_states.svg")
    .column.invert.pop.bright(style="margin-top: -25px")
      svg#L2T(viewBox="-0.5 5 87 144", width="100%", height="100%")
        rect(x="2", y="37", width="80", height="80", rx="12", ry="12", fill="#000000", stroke="#000000", stroke-width="4", transform="translate(2,3)", opacity="0.25")
        rect(x="2", y="37", width="80", height="80", rx="12", ry="12", fill="#e1d5e7", stroke="#000000", stroke-width="4")
        path.leftSegment(d="M 22 37 L 22 115", fill="none", stroke="#000000", stroke-width="2", stroke-miterlimit="10")
        path.leftDown(d="M 22 114.76 L 14 98.76 L 22 102.76 L 30 98.76 Z", fill="#000000", stroke="#000000", stroke-width="2", stroke-miterlimit="10")
        path.leftUp(d="M 22 39.24 L 30 55.24 L 22 51.24 L 14 55.24 Z", fill="#000000", stroke="#000000", stroke-width="2", stroke-miterlimit="10", opacity="0")
        path.rightSegment(d="M 62 37 L 62 115", fill="none", stroke="#000000", stroke-width="2", stroke-miterlimit="10")
        path.rightDown(d="M 62 114.76 L 54 98.76 L 62 102.76 L 70 98.76 Z", fill="#000000", stroke="#000000", stroke-width="2", stroke-miterlimit="10")
        path.rightUp(d="M 62 39.24 L 70 55.24 L 62 51.24 L 54 55.24 Z", fill="#000000", stroke="#000000", stroke-width="2", stroke-miterlimit="10", opacity="0")
        circle.agent(cx="22", cy="20", r="10", fill="hsl(57.4, 50%, 50%)", stroke="hsl(57.4, 40%, 40%)")
  .fragment.L2T(data-target="L2T", data-step=0)
  .fragment.L2T(data-target="L2T", data-step=1)
  .fragment.L2T(data-target="L2T", data-step=2)
  .fragment.L2T(data-target="L2T", data-step=3)
  .fragment.L2T(data-target="L2T", data-step=4)

section
  .columns.r-stretch
    .column.fill.hexrobots#hexL2T.
       . . . . . . . . . . . . . . . . 
      . . . . . . . . . . . . . . . . .
       . . . . . . . O O . . . . . . . 
      2 . . . . O . O O O . O . . . . 2
       2 . . . O O O . . O O O . . . 2 
      . 2 . . O . O . O . O . O . . 2 .
       1 2 . O . . . O O . . . O . 2 . 
      . 1 2 O . 2 . O . O . 2 . O 2 . .
       . . 2 . 2 2 O . . O 2 2 . 2 . . 
      . . . 2 . . . . . . . . . 2 . . .
       . . . 2 . 2 O . . O 2 . 2 . . . 
      . . . . 2 2 . . . . . 2 2 . . . .
       . . . . 2 . O . . O . 2 . . . . 
      . . . . . . 1 O . O 1 . . . . . .
       . O . . . . . O O . . . . . O . 
      . O O . . . O . . . O . . . O O .
       O . O . . O O O O O O . . O . O 
      . . . . . O . . . . . O . . . . .
       O O O . O . . O O . . O . O O O 
      . . . . O . O O . O O . O . . . .
       O O O O O . O . . O . O O O O O 
      . O . . . O . . . . . O . . . O .
       . . O O . O . . . . O . O O . . 
      . . . . . . O . . . O . . . . . .
       . . O O O . O . . O . O O O . . 
      . . . . . O . O . O . O . . . . .
       . . O O . . . O O . . . O O . . 
      . . . . O O . . O . . O O . . . .
       . . O . O . . . . . . O . O . . 
      . . . . . . . . O . . . . . . . .
       . . O . . O . . . . O . . O . . 
      . . . . O O O . O . O O O . . . .
       . . O O O . O . . O . O O O . . 
      . O . . . . . . O . . . . . . O .
       O O O O . O O . . O O . O O O O 
      . . . . O . O . O . O . O . . . .
       O O O . O . . . . . . O . O O O 
      . . . . 1 O . . O . . O 1 . . . .
       O . O 1 . O . . . . O . 1 O . O 
      . O O 1 . . O . O . O . . 1 O O .
       . O . . . . O . . O . . . . O . 
      . . . . . . . O O O . . . . . . .
       . . . . 2 . . O O . . 2 . . . . 
      . . . . 2 2 . . O . . 2 2 . . . .
       . . . 2 . 2 . . . . 2 . 2 . . . 
      . . . 2 . . . . O . . . . 2 . . .
       . . 2 . 2 2 . O O . 2 2 . 2 . . 
      . . 2 O . 2 . O . O . 2 . O 2 . .
       . 2 . O . . O . . O . . O . 2 . 
      . 2 . . O . O . . . O . O . . 2 .
       2 . . . O O . . . . O O . . . 2 
      2 . . . . O . . . . . O . . . . 2
       . . . . . . . . . . . . . . . . 
      . . . . . . . . . . . . . . . . .
    .column.invert.bright.pop(style="text-align: right")
      svg#hexL2Tdiagram(viewBox="-0.5 5 87 144", width="80%", height="100%")
        rect(x="2", y="37", width="80", height="80", rx="12", ry="12", fill="#000000", stroke="#000000", stroke-width="4", transform="translate(2,3)", opacity="0.25")
        rect(x="2", y="37", width="80", height="80", rx="12", ry="12", fill="#e1d5e7", stroke="#000000", stroke-width="4")
        path.leftSegment(d="M 22 37 L 22 115", fill="none", stroke="#000000", stroke-width="2", stroke-miterlimit="10")
        path.leftDown(d="M 22 114.76 L 14 98.76 L 22 102.76 L 30 98.76 Z", fill="#000000", stroke="#000000", stroke-width="2", stroke-miterlimit="10")
        path.leftUp(d="M 22 39.24 L 30 55.24 L 22 51.24 L 14 55.24 Z", fill="#000000", stroke="#000000", stroke-width="2", stroke-miterlimit="10", opacity="0")
        path.rightSegment(d="M 62 37 L 62 115", fill="none", stroke="#000000", stroke-width="2", stroke-miterlimit="10")
        path.rightDown(d="M 62 114.76 L 54 98.76 L 62 102.76 L 70 98.76 Z", fill="#000000", stroke="#000000", stroke-width="2", stroke-miterlimit="10")
        path.rightUp(d="M 62 39.24 L 70 55.24 L 62 51.24 L 54 55.24 Z", fill="#000000", stroke="#000000", stroke-width="2", stroke-miterlimit="10", opacity="0")
        circle.agent(cx="22", cy="20", r="10", fill="hsl(57.4, 50%, 50%)", stroke="hsl(57.4, 40%, 40%)")
  .robotpivot.fragment(data-target="hexL2T", data-pivots="2,7/-120@R2,7 1,6/-120@R1,6 2,7/-120@R3,8 1,6/-120@R2,7 2,7/-120@R4,9 1,6/-120@R3,8 2,7/-120@R5,10 1,6/-120@R4,9 2,7/-120@R6,11 1,6/-120@R5,10 2,7/-120@R7,12 1,6/-120@R6,11")
  .robotpivot.fragment(data-target="hexL2T", data-pivots="12,13/-120@BL12,13/-120@BL11,14")
  .robotpivot.fragment(data-target="hexL2T", data-pivots="2,7/-120@R8,13/-120@BR9,14/-120@BL9,16 1,6/-120@R7,12/-120@R8,13/-60@BR9,14/-60@BR8,15/-120@BL8,15 12,13/-120@BL10,15/-120@L9,16/-120@L8,15/-120@BL7,14")
  .fragment.L2T(data-target="hexL2Tdiagram", data-step=0)
  .robotpivot.fragment(data-target="hexL2T", data-pivots="6,39/-120@R6,39/-120@TR7,40/-120@TR8,39/-120@R9,38 7,38/120@TR7,38 8,37/-120@R8,37/-120@BR9,38/-120@BL9,40/-120@BL8,41 7,38/-120@R7,36/-120@R8,37/-120@BR9,38/-120@BL9,40 8,37/-120@BL7,42 7,38/-120@BL8,41 8,37/-120@BL6,43 7,38/-120@BL7,42 8,37/-120@BL5,44 7,38/-120@BL6,43 8,37/-120@BL4,45 7,38/-120@BL5,44 8,37/-120@BL3,46 7,38/-120@BL4,45 8,37/-120@BL2,47 7,38/-120@BL3,46")

section
  h2 Our Results
  ul
    li No forbidden patterns or extra robots
  p
  table
    tr
      th Model:
      th Restricted
      th Restricted + Leapfrog
      th Restricted + Leapfrog + Monkey
    tr
      th Hexagons
      td PSPACE-hard
      td
        svg(width="225px", height="100px", viewBox="0 0 2.25 1")
          rect(width="100%", height="100%", fill="url(#hatch)")
      td Universal:
        span(style="font-size: 90%") $O(n^3)$ moves
    tr
      th Squares
      td PSPACE-hard
      td PSPACE-hard
      td PSPACE-hard
