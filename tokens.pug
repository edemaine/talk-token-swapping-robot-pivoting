section
  h1(style="font-variant: small-caps") Hardness of Token Swapping on Trees
  hr
  h4
    | Oswin&nbsp;Aichholzer
    span.sep &bull;
    u Erik&nbsp;Demaine
    span.sep &bull;
    | Matias&nbsp;Korman
    span.sep &bull;
    | Jayson&nbsp;Lynch
    span.sep &bull;
    | Anna&nbsp;Lubiw
    span.sep &bull;
    | Zuzana&nbsp;Masárová
    span.sep &bull;
    | Mikhail&nbsp;Rudoy
    span.sep &bull;
    | Virginia&nbsp;Vassilevska&nbsp;Williams
    span.sep &bull;
    | Nicole&nbsp;Wein
  svg.tokens(viewBox="-10 -10 870 170", style="padding-top:0.5rem")
    line(x1="50", y1="25", x2="100", y2="25")
    line(x1="150", y1="25", x2="200", y2="25")
    line(x1="250", y1="25", x2="300", y2="25")
    line(x1="350", y1="25", x2="400", y2="25")
    line(x1="450", y1="25", x2="500", y2="25")
    line(x1="550", y1="25", x2="600", y2="25")
    line(x1="650", y1="25", x2="700", y2="25")
    line(x1="750", y1="25", x2="800", y2="25")
    line(x1="225", y1="50", x2="225", y2="100")
    rect.t1(x="0", y="0", width="50", height="50")
    rect.t2(x="100", y="0", width="50", height="50")
    rect.t3(x="200", y="0", width="50", height="50")
    rect.t4(x="300", y="0", width="50", height="50")
    rect.t5(x="400", y="0", width="50", height="50")
    rect.t6(x="500", y="0", width="50", height="50")
    rect.t7(x="600", y="0", width="50", height="50")
    rect.t8(x="700", y="0", width="50", height="50")
    rect.t9(x="800", y="0", width="50", height="50")
    rect.t10(x="200", y="100", width="50", height="50")
    circle.t9(cx="25", cy="25", r="16")
    circle.t8(cx="125", cy="25", r="16")
    circle.t7(cx="225", cy="25", r="16")
    circle.t6(cx="325", cy="25", r="16")
    circle.t5(cx="425", cy="25", r="16")
    circle.t4(cx="525", cy="25", r="16")
    circle.t3(cx="625", cy="25", r="16")
    circle.t2(cx="725", cy="25", r="16")
    circle.t1(cx="825", cy="25", r="16")
    circle.t10(cx="225", cy="125", r="16")
  .tokenswap.fragment(data-swaps="10,7 10,8 10,9 9,8 9,6 9,5 9,4 9,3 9,2 9,1 8,6 8,5 8,4 8,3 8,2 8,1 7,5 7,4 7,3 7,2 7,1 6,4 6,3 6,2 6,1 5,3 5,2 5,1 4,2 4,1 1,2 1,10 2,10 3,10")

section
  h2 Token Swapping Problem
  ul
    li Given a <b>graph</b>
    ul
      li.fragment(data-fragment-index="1") with one <b>token</b> per vertex
      li.fragment(data-fragment-index="2") and a <b>destination</b> for each token
    li.fragment How many <b>swaps</b> along edges do we need?
  svg.tokens.r-stretch(viewBox="-10 -10 270 170", style="padding-top:0.5rem")
    line(x1="50", y1="25", x2="100", y2="25")
    line(x1="150", y1="25", x2="200", y2="25")
    line(x1="25", y1="50", x2="25", y2="100")
    line(x1="225", y1="50", x2="225", y2="100")
    line(x1="200", y1="50", x2="150", y2="100")
    line(x1="50", y1="125", x2="100", y2="125")
    line(x1="150", y1="125", x2="200", y2="125")
    rect(x="0", y="0", width="50", height="50")
    rect(x="100", y="0", width="50", height="50")
    rect(x="200", y="0", width="50", height="50")
    rect(x="0", y="100", width="50", height="50")
    rect(x="100", y="100", width="50", height="50")
    rect(x="200", y="100", width="50", height="50")
    rect.t1.fragment(data-fragment-index="2", x="0", y="0", width="50", height="50")
    rect.t2.fragment(data-fragment-index="2", x="100", y="0", width="50", height="50")
    rect.t3.fragment(data-fragment-index="2", x="200", y="0", width="50", height="50")
    rect.t4.fragment(data-fragment-index="2", x="0", y="100", width="50", height="50")
    rect.t5.fragment(data-fragment-index="2", x="100", y="100", width="50", height="50")
    rect.t6.fragment(data-fragment-index="2", x="200", y="100", width="50", height="50")
    circle.t4.fragment(data-fragment-index="1", cx="25", cy="25", r="16")
    circle.t2.fragment(data-fragment-index="1", cx="125", cy="25", r="16")
    circle.t6.fragment(data-fragment-index="1", cx="225", cy="25", r="16")
    circle.t5.fragment(data-fragment-index="1", cx="25", cy="125", r="16")
    circle.t1.fragment(data-fragment-index="1", cx="125", cy="125", r="16")
    circle.t3.fragment(data-fragment-index="1", cx="225", cy="125", r="16")
  //- .tokenswap.fragment(data-swaps="3,6 1,5 1,4")
  .tokenswap.fragment(data-swaps="3,6")
  .tokenswap.fragment(data-swaps="1,5")
  .tokenswap.fragment(data-swaps="1,4")

section
  h2 Cayley Graph View
  table.side-by-side.compact
    tr
      td &bull; Positions of tokens
      td &bull; Permutation in $S_n$
    tr
      td &bull; Graph edge
      td &bull; Transposition (swap)
    tr
      td &bull; Configuration space
      td &bull; Cayley graph
    tr
      td &bull; Reconfiguration
      td &bull; Path in Cayley graph
    tr.r-stretch
      td
        svg.tokens(viewBox="-10 -10 370 70")
          line(x1="50", y1="25", x2="100", y2="25",  style="stroke:#ffff00")
          line(x1="150", y1="25", x2="200", y2="25", style="stroke:#ff48fa")
          line(x1="250", y1="25", x2="300", y2="25", style="stroke:#23fefa")
          rect(x="0", y="0", width="50", height="50")
          rect(x="100", y="0", width="50", height="50")
          rect(x="200", y="0", width="50", height="50")
          rect(x="300", y="0", width="50", height="50")
          circle(cx="25", cy="25", r="16")
          circle(cx="125", cy="25", r="16")
          circle(cx="225", cy="25", r="16")
          circle(cx="325", cy="25", r="16")
      td(style="text-align: center")
        img(src="cayley4.png", style="height:400px; margin: 0; filter: invert(1)")
    tr
      td(colspan=2, style="text-align:right")
        a.url(href="https://commons.wikimedia.org/wiki/File:Symmetric_group_4;_Cayley_graph_1,2,6_(1-based).png") https://commons.wikimedia.org/wiki/File:Symmetric_group_4;_Cayley_graph_1,2,6_(1-based).png

  //-
    ul
      li Token positions form a <b>permutation</b> in symmetric group $S_n$
      li Each edge defines <b>transposition</b> (1-swap) generator
      li <b>Cayley graph</b> represents space of permutations

section
  h2 Connection to Bubble Sort
  table.side-by-side
    tr
      td Path graph
      td Sorting by swapping <b>adjacent</b> elements
    tr
      td Min number of swaps
      td Number of <b>inversions</b> / cost of <b>bubble sort</b>
  svg.tokens.r-stretch(viewBox="-10 -10 370 70", style="padding-top:0.5rem")
    line(x1="50", y1="25", x2="100", y2="25")
    line(x1="150", y1="25", x2="200", y2="25")
    line(x1="250", y1="25", x2="300", y2="25")
    rect.t1(x="0", y="0", width="50", height="50")
    rect.t2(x="100", y="0", width="50", height="50")
    rect.t3(x="200", y="0", width="50", height="50")
    rect.t4(x="300", y="0", width="50", height="50")
    circle.t4(cx="25", cy="25", r="16")
    circle.t3(cx="125", cy="25", r="16")
    circle.t2(cx="225", cy="25", r="16")
    circle.t1(cx="325", cy="25", r="16")
  .tokenswap.fragment(data-fragment-index="1", data-swaps="4,3 4,2 4,1 3,2 3,1 2,1")

//- Clique
  svg.tokens(viewBox="-10 -10 170 170", style="padding-top:0.5rem")
    line(x1="50", y1="25", x2="100", y2="25")
    line(x1="50", y1="125", x2="100", y2="125")
    line(x1="25", y1="50", x2="25", y2="100")
    line(x1="125", y1="50", x2="125", y2="100")
    line(x1="50", y1="50", x2="100", y2="100")
    line(x1="50", y1="100", x2="100", y2="50")
    rect(x="0", y="0", width="50", height="50")
    rect(x="100", y="0", width="50", height="50")
    rect(x="0", y="100", width="50", height="50")
    rect(x="100", y="100", width="50", height="50")
    circle.t1(cx="25", cy="25", r="16")
    circle.t3(cx="125", cy="25", r="16")
    circle.t5(cx="25", cy="125", r="16")
    circle.t7(cx="125", cy="125", r="16")

section
  h2 History
  ul
    li Studied in discrete mathematics, theoretical computer science, network engineering, robot motion planning, game theory
    li <cite>Cayley [1849]</cite> solved <b>clique</b> version
    li <cite>Knuth [1968]</cite> solved <b>path</b> version
    //- li <cite>Akers &amp; Krishnamurthy [1989]</cite> introduced as "sorting with a transposition graph" for routing in proposed network topology
    li Also solved for cycles, stars, brooms, bicliques <!--, complete split graphs-->
  ul.fragment
    li <b>NP-complete</b> <cite>[Amir &amp; Porat 2015]</cite>
    li <b>APX-complete</b> with <b>4-approximation</b> <br> <cite>[Miltzow et al. 2016]</cite>
    li <b>W[1]-hard</b> with respect to number of swaps <cite>[Bonnet et al. 2018]</cite>

section
  h2 Token Swapping in Trees
  svg.tokens.r-stretch(viewBox="-10 -10 370 170", style="padding-top:0.5rem")
    line(x1="50", y1="25", x2="100", y2="65")
    line(x1="50", y1="125", x2="100", y2="85")
    line(x1="150", y1="75", x2="200", y2="75")
    line(x1="300", y1="25", x2="250", y2="65")
    line(x1="300", y1="125", x2="250", y2="85")
    rect.t1(x="0", y="0", width="50", height="50")
    rect.t2(x="0", y="100", width="50", height="50")
    rect.t3(x="100", y="50", width="50", height="50")
    rect.t4(x="200", y="50", width="50", height="50")
    rect.t5(x="300", y="0", width="50", height="50")
    rect.t6(x="300", y="100", width="50", height="50")
    circle.t5(cx="25", cy="25", r="16")
    circle.t1(cx="25", cy="125", r="16")
    circle.t6(cx="125", cy="75", r="16")
    circle.t4(cx="225", cy="75", r="16")
    circle.t2(cx="325", cy="25", r="16")
    circle.t3(cx="325", cy="125", r="16")
  //.tokenswap.fragment(data-swaps="2,4 2,6 2,1 1,5 3,6 3,5 4,5")
  .tokenswap.fragment(data-swaps="2,4")
  .tokenswap.fragment(data-swaps="2,6")
  .tokenswap.fragment(data-swaps="2,1")
  .tokenswap.fragment(data-swaps="1,5")
  .tokenswap.fragment(data-swaps="3,6")
  .tokenswap.fragment(data-swaps="3,5")
  .tokenswap.fragment(data-swaps="4,5")

section
  h2 History: Trees
  ul
    li <cite>Akers &amp; Krishnamurthy [1989]</cite> first studied <b>tree</b> version as routing in proposed network topology
    li Three <b>2-approximation</b> algorithms <br> <cite>[Akers &amp; Krishnamurthy 1989; Vaughan 1991; Yamanaka et al. 2015]</cite>
    li Family of algorithms (including past algorithms) cannot beat $4 \over 3$-approximation <cite>[Biniaz et al. 2019]</cite>
    p
    li <u>OPEN</u>: NP-hard?
    li <u>OPEN</u>: Better approximation?

//-section
  h2 Our Results
  ul
    li Token swapping is <b>NP-hard on trees</b>
      ul
        li Also for <b>parallel</b> token swapping, where we can swap a matching in each round
    li Family of algorithms (including past algorithms) cannot beat 2-approximation
  svg.tokens.r-stretch(viewBox="-10 -10 370 170", style="padding-top:0.5rem")
    line(x1="50", y1="25", x2="100", y2="65")
    line(x1="50", y1="125", x2="100", y2="85")
    line(x1="150", y1="75", x2="200", y2="75")
    line(x1="300", y1="25", x2="250", y2="65")
    line(x1="300", y1="125", x2="250", y2="85")
    rect.t1(x="0", y="0", width="50", height="50")
    rect.t2(x="0", y="100", width="50", height="50")
    rect.t3(x="100", y="50", width="50", height="50")
    rect.t4(x="200", y="50", width="50", height="50")
    rect.t5(x="300", y="0", width="50", height="50")
    rect.t6(x="300", y="100", width="50", height="50")
    circle.t5(cx="25", cy="25", r="16")
    circle.t1(cx="25", cy="125", r="16")
    circle.t6(cx="125", cy="75", r="16")
    circle.t4(cx="225", cy="75", r="16")
    circle.t2(cx="325", cy="25", r="16")
    circle.t3(cx="325", cy="125", r="16")
  //-.tokenswap.fragment(data-fragment-index="1", data-swaps="2,4 2,6 2,1 1,5 3,6 3,5 4,5")

section
  h2 Happy Leaf Conjecture
  ul
    li <u>Conjecture</u>: <cite>[Vaughan 1991]</cite> Never need to swap a token that's already at destination leaf
    li.fragment(data-fragment-index="1") <u>Counterexample</u>: <cite>[Biniaz et al. 2019]</cite> <br> (smallest possible)
  svg.tokens.fragment(data-fragment-index="1", viewBox="-10 -10 870 170", style="padding-top:0.5rem")
    line(x1="50", y1="25", x2="100", y2="25")
    line(x1="150", y1="25", x2="200", y2="25")
    line(x1="250", y1="25", x2="300", y2="25")
    line(x1="350", y1="25", x2="400", y2="25")
    line(x1="450", y1="25", x2="500", y2="25")
    line(x1="550", y1="25", x2="600", y2="25")
    line(x1="650", y1="25", x2="700", y2="25")
    line(x1="750", y1="25", x2="800", y2="25")
    line(x1="225", y1="50", x2="225", y2="100")
    rect.t1(x="0", y="0", width="50", height="50")
    rect.t2(x="100", y="0", width="50", height="50")
    rect.t3(x="200", y="0", width="50", height="50")
    rect.t4(x="300", y="0", width="50", height="50")
    rect.t5(x="400", y="0", width="50", height="50")
    rect.t6(x="500", y="0", width="50", height="50")
    rect.t7(x="600", y="0", width="50", height="50")
    rect.t8(x="700", y="0", width="50", height="50")
    rect.t9(x="800", y="0", width="50", height="50")
    rect.t10(x="200", y="100", width="50", height="50")
    circle.t9(cx="25", cy="25", r="16")
    circle.t8(cx="125", cy="25", r="16")
    circle.t7(cx="225", cy="25", r="16")
    circle.t6(cx="325", cy="25", r="16")
    circle.t5(cx="425", cy="25", r="16")
    circle.t4(cx="525", cy="25", r="16")
    circle.t3(cx="625", cy="25", r="16")
    circle.t2(cx="725", cy="25", r="16")
    circle.t1(cx="825", cy="25", r="16")
    circle.t10(cx="225", cy="125", r="16")
  .tokenswap.fragment(data-swaps="10,7 10,8 10,9")
  .tokenswap.fragment(data-swaps="9,8 9,6 9,5 9,4 9,3 9,2 9,1")
  .tokenswap.fragment(data-swaps="8,6 8,5 8,4 8,3 8,2 8,1")
  .tokenswap.fragment(data-swaps="7,5 7,4 7,3 7,2 7,1")
  .tokenswap.fragment(data-swaps="6,4 6,3 6,2 6,1")
  .tokenswap.fragment(data-swaps="5,3 5,2 5,1")
  .tokenswap.fragment(data-swaps="4,2 4,1")
  .tokenswap.fragment(data-swaps="1,2 1,10 2,10 3,10")
  ul
    li.fragment Any algorithm satisfying conjecture cannot beat $4 \over 3$-approximation <cite>[Biniaz et al. 2019]</cite>

section
  h2 Our Results
  ul
    li
      span.fragment.highlight-green Token swapping is <b>NP-hard on trees</b>
      ul
        li Also for <b>parallel</b> token swapping, where we can swap a matching in each round
    li Algorithms that stay <b>within 1 of shortest path</b> cannot beat 2-approximation
  svg.tokens.r-stretch(viewBox="-10 -10 370 170", style="padding-top:0.5rem")
    line(x1="50", y1="25", x2="100", y2="65")
    line(x1="50", y1="125", x2="100", y2="85")
    line(x1="150", y1="75", x2="200", y2="75")
    line(x1="300", y1="25", x2="250", y2="65")
    line(x1="300", y1="125", x2="250", y2="85")
    rect.t1(x="0", y="0", width="50", height="50")
    rect.t2(x="0", y="100", width="50", height="50")
    rect.t3(x="100", y="50", width="50", height="50")
    rect.t4(x="200", y="50", width="50", height="50")
    rect.t5(x="300", y="0", width="50", height="50")
    rect.t6(x="300", y="100", width="50", height="50")
    circle.t5(cx="25", cy="25", r="16")
    circle.t1(cx="25", cy="125", r="16")
    circle.t6(cx="125", cy="75", r="16")
    circle.t4(cx="225", cy="75", r="16")
    circle.t2(cx="325", cy="25", r="16")
    circle.t3(cx="325", cy="125", r="16")
  //.tokenswap.fragment(data-fragment-index="1", data-swaps="2,4 2,6 2,1 1,5 3,6 3,5 4,5")

section
  h2 Reduction from Star Subseq.
  ul
    li Rephrasing/simplification of Garey &amp; Johnson's &ldquo;MS6: Permutation Generation&rdquo;:
    ul
      li Given tokens&rsquo; start/destination on <b>$\bm n$-star</b>
      li Given <b>sequence</b> of edges (incident to center)
      li Can you get from start to destination<br>via swaps that form a <b>subsequence</b>?
  .columns.r-stretch
    .column.fill.justify-content-center(style="flex-grow: 2")
      svg.tokens(viewBox="-10 -10 270 170")
        line(x1="50", y1="25", x2="100", y2="65")
        line(x1="50", y1="125", x2="100", y2="85")
        line(x1="200", y1="25", x2="150", y2="65")
        line(x1="200", y1="125", x2="150", y2="85")
        rect.t1(x="0", y="0", width="50", height="50")
        rect.t3(x="0", y="100", width="50", height="50")
        rect.t9(x="100", y="50", width="50", height="50")
        rect.t5(x="200", y="0", width="50", height="50")
        rect.t7(x="200", y="100", width="50", height="50")
        circle.t7(cx="25", cy="25", r="16")
        circle.t5(cx="25", cy="125", r="16")
        circle.t9(cx="125", cy="75", r="16")
        circle.t1(cx="225", cy="25", r="16")
        circle.t3(cx="225", cy="125", r="16")
      //.tokenswap.fragment(data-swaps="7,9 7,3 3,5 5,1 1,9")
      .tokenswap.fragment(data-fragment-index=1, data-swaps="7,9")
      .tokenswap.fragment(data-fragment-index=2, data-swaps="7,3")
      .tokenswap.fragment(data-fragment-index=3, data-swaps="3,5")
      .tokenswap.fragment(data-fragment-index=4, data-swaps="5,1")
      .tokenswap.fragment(data-fragment-index=5, data-swaps="1,9")
    .column.fill.justify-content-center
      ol
        li.fragment.highlight-green(data-fragment-index=1)
          svg.tokens(viewBox="-10 -10 170 70", height="70px")
            line(x1="50", y1="25", x2="100", y2="25")
            rect.t1(x="0", y="0", width="50", height="50")
            rect.t9(x="100", y="0", width="50", height="50")
        li
          svg.tokens(viewBox="-10 -10 170 70", height="70px")
            line(x1="50", y1="25", x2="100", y2="25")
            rect.t3(x="0", y="0", width="50", height="50")
            rect.t9(x="100", y="0", width="50", height="50")
        li
          svg.tokens(viewBox="-10 -10 170 70", height="70px")
            line(x1="50", y1="25", x2="100", y2="25")
            rect.t5(x="0", y="0", width="50", height="50")
            rect.t9(x="100", y="0", width="50", height="50")
        li.fragment.highlight-green(data-fragment-index=2)
          svg.tokens(viewBox="-10 -10 170 70", height="70px")
            line(x1="50", y1="25", x2="100", y2="25")
            rect.t7(x="0", y="0", width="50", height="50")
            rect.t9(x="100", y="0", width="50", height="50")
    .column.fill.justify-content-center
      ol(start=5)
        li.fragment.highlight-green(data-fragment-index=3)
          svg.tokens(viewBox="-10 -10 170 70", height="70px")
            line(x1="50", y1="25", x2="100", y2="25")
            rect.t3(x="0", y="0", width="50", height="50")
            rect.t9(x="100", y="0", width="50", height="50")
        li
          svg.tokens(viewBox="-10 -10 170 70", height="70px")
            line(x1="50", y1="25", x2="100", y2="25")
            rect.t7(x="0", y="0", width="50", height="50")
            rect.t9(x="100", y="0", width="50", height="50")
        li.fragment.highlight-green(data-fragment-index=4)
          svg.tokens(viewBox="-10 -10 170 70", height="70px")
            line(x1="50", y1="25", x2="100", y2="25")
            rect.t5(x="0", y="0", width="50", height="50")
            rect.t9(x="100", y="0", width="50", height="50")
        li.fragment.highlight-green(data-fragment-index=5)
          svg.tokens(viewBox="-10 -10 170 70", height="70px")
            line(x1="50", y1="25", x2="100", y2="25")
            rect.t1(x="0", y="0", width="50", height="50")
            rect.t9(x="100", y="0", width="50", height="50")

section
  h2 0/1-Weighted Token Swapping
  ul
    li Each token $t$ has a weight $w(t) \in \{0,1\}$
    li Cost of swapping $t \leftrightarrow t'$ is $w(t) + w(t')$
  svg.tokens(viewBox="-510 -10 795 370")
    foreignObject(x="100", y="0", width="300", height="150", transform="scale(0.75)")
      div $w(~~~~~~) = 1$
      div $w(~~~~~~) = 0$
    circle.t12(cx="157", cy="15", r="16")
    circle.t15(cx="162", cy="20", r="16")
    circle.t19(cx="167", cy="25", r="16")
    circle.t22(cx="172", cy="30", r="16")
    circle.t26(cx="177", cy="35", r="16")
    circle.t1(cx="157", cy="63", r="16")
    circle.t3(cx="162", cy="68", r="16")
    circle.t5(cx="167", cy="73", r="16")
    circle.t7(cx="172", cy="78", r="16")
    circle.t9(cx="177", cy="83", r="16")
    // Path
    line(x1="-475", y1="150", x2="-475", y2="200")
    line(x1="-475", y1="50", x2="-475", y2="100")
    line(x1="-450", y1="25", x2="-400", y2="25")
    line(x1="-350", y1="25", x2="-300", y2="25")
    line(x1="-250", y1="25", x2="-200", y2="25")
    line(x1="-150", y1="25", x2="-100", y2="25")
    line(x1="-50", y1="25", x2="0", y2="25")
    // Root
    line(x1="25", y1="50", x2="25", y2="100")
    // Star
    line(x1="0", y1="125", x2="-200", y2="200")
    line(x1="0", y1="150", x2="-50", y2="200")
    line(x1="50", y1="150", x2="100", y2="200")
    line(x1="50", y1="125", x2="250", y2="200")
    // Below star
    line(x1="-200", y1="250", x2="-200", y2="300")
    line(x1="-50", y1="250", x2="-50", y2="300")
    line(x1="100", y1="250", x2="100", y2="300")
    line(x1="250", y1="250", x2="250", y2="300")
    // Free
    line(x1="-250", y1="250", x2="-225", y2="225")
    line(x1="-100", y1="250", x2="-75", y2="225")
    line(x1="50", y1="250", x2="75", y2="225")
    line(x1="200", y1="250", x2="225", y2="225")
    // Path
    rect.t11(x="-500", y="200", width="50", height="50")
    rect.t12(x="-500", y="100", width="50", height="50")
    rect.t13(x="-500", y="0", width="50", height="50")
    rect.t14(x="-400", y="0", width="50", height="50")
    rect.t15(x="-300", y="0", width="50", height="50")
    rect.t16(x="-200", y="0", width="50", height="50")
    rect.t17(x="-100", y="0", width="50", height="50")
    rect.t18(x="0", y="0", width="50", height="50")
    // Root
    rect.t9(x="0", y="100", width="50", height="50")
    // Star
    rect.t19(x="-225", y="200", width="50", height="50")
    rect.t22(x="-75", y="200", width="50", height="50")
    rect.t20(x="75", y="200", width="50", height="50")
    rect.t21(x="225", y="200", width="50", height="50")
    // Star second level
    rect.t26(x="-225", y="300", width="50", height="50")
    rect.t25(x="-75", y="300", width="50", height="50")
    rect.t24(x="75", y="300", width="50", height="50")
    rect.t23(x="225", y="300", width="50", height="50")
    // Free
    rect.t1(x="-300", y="250", width="50", height="50")
    rect.t3(x="-150", y="250", width="50", height="50")
    rect.t5(x="0", y="250", width="50", height="50")
    rect.t7(x="150", y="250", width="50", height="50")
    // Path
    circle.t19(cx="-475", cy="225", r="16")
    circle.t20(cx="-475", cy="125", r="16")
    circle.t21(cx="-475", cy="25", r="16")
    circle.t22(cx="-375", cy="25", r="16")
    circle.t23(cx="-275", cy="25", r="16")
    circle.t24(cx="-175", cy="25", r="16")
    circle.t25(cx="-75", cy="25", r="16")
    circle.t26(cx="25", cy="25", r="16")
    // Root
    circle.t9(cx="25", cy="125", r="16")
    // Star
    circle.t11(cx="-200", cy="225", r="16")
    circle.t12(cx="-50", cy="225", r="16")
    circle.t13(cx="100", cy="225", r="16")
    circle.t14(cx="250", cy="225", r="16")
    // Star second level
    circle.t18(cx="-200", cy="325", r="16")
    circle.t15(cx="-50", cy="325", r="16")
    circle.t17(cx="100", cy="325", r="16")
    circle.t16(cx="250", cy="325", r="16")
    // Free
    circle.t7(cx="-275", cy="275", r="16")
    circle.t5(cx="-125", cy="275", r="16")
    circle.t1(cx="25", cy="275", r="16")
    circle.t3(cx="175", cy="275", r="16")
  .tokenswap.fragment(data-swaps="11,9 11,26 11,25 11,24 11,23 11,22 11,21 11,20 11,19")
  .tokenswap.fragment(data-swaps="7,9")
  .tokenswap.fragment(data-swaps="26,7 26,18")
  .tokenswap.fragment(data-swaps="12,7 12,25 12,24 12,23 12,22 12,21 12,20 12,19")
  .tokenswap.fragment(data-swaps="25,7 25,15")
  .tokenswap.fragment(data-swaps="13,7 13,24 13,23 13,22 13,21 13,20 13,19 7,24 24,17")
  .tokenswap.fragment(data-swaps="14,7 14,23 14,22 14,21 14,20 14,19 7,3 3,23 23,16")
  .tokenswap.fragment(data-swaps="15,3 15,22 15,21 15,20 15,19 3,5 5,22")
  .tokenswap.fragment(data-swaps="16,5 16,21 16,20 16,19 5,21")
  .tokenswap.fragment(data-swaps="17,5 17,20 17,19 5,1 1,20")
  .tokenswap.fragment(data-swaps="18,1 18,19 1,9 9,19")

section
  h2 Unweighted Token Swapping
  ul
    li <u>Idea</u>: Simulate each weight-1 token<br>with long path of tokens
      ul
        li Increase cost gap between<br>&ldquo;good&rdquo; and &ldquo;bad&rdquo; solutions
        li $\leq n$ swaps from weight-0 tokens negligible
    p
    li <u>Challenge</u>: Slack $\Rightarrow$ options no longer forced
